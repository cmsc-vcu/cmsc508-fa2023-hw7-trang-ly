---
title: Homework 7 - Creating a resume database
author: Trang Ly
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This .qmd document outlines the creation of a resume database. It includes the database schema, examples of data in the tables, sample queries, and a reflection on the experience.

GITHUB URL: [https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-trang-ly](https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-trang-ly)

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

The following document details the creation of a resume database, a company-wide resume capturing the collective skills and certifications of all the people in the company. 

## Crows-foot diagram

This is a Crows foot diagram detailing the entities, attributes, and relations between entities within the database.

```{mermaid}
%%| echo: false
erDiagram
    PEOPLE ||--o{ PEOPLESKILLS : Has
    SKILLS ||--o{ PEOPLESKILLS : Possesses
    PEOPLE ||--o{ PEOPLEROLES : Assumes
    ROLES ||--o{ PEOPLEROLES : Assigned_to

    PEOPLE {
        string id PK
        string first_name
        string last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle
        string brief_bio
        string date_joined
    }
    SKILLS {
        string id PK
        string name
        string description
        string tag
        string url
        string time_commitment
    }
    ROLES {
        string id PK
        string name
        string sort_priority
    }
    PEOPLESKILLS {
        string id PK
        string skills_id FK
        string people_id FK
        string date_acquired
    }
    PEOPLEROLES {
        string id PK
        string people_id FK
        string role_id FK
        string date_role_acquired
    }
```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe the employees within the company, their contact information, description, data joined, etc. 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list people table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe the skills that *people* can possess. 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list skills table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe the roles that *people* can have. 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
SELECT skills_name, skills_tag, skills_description
    FROM skills
    ORDER BY skills_name;
"""
```

(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and email addresses ordered by last_name

```{python}
sql = f"""
SELECT people_first_name, people_last_name, people_email 
    FROM people
    ORDER BY people_last_name;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List skill names of Person 1

```{python}
sql = f"""
SELECT s.skills_name
    FROM people p
    JOIN peopleskills ps ON p.people_id = ps.peopleskills_people_id
    JOIN skills s ON ps.peopleskills_skills_id = s.skills_id
    WHERE p.people_id = 1;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6

```{python}
sql = f"""
SELECT p.people_first_name, p.people_last_name
    FROM people p
    JOIN peopleskills ps ON p.people_id = ps.peopleskills_people_id
    JOIN skills s ON ps.peopleskills_skills_id = s.skills_id
    WHERE s.skills_id = 6;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role

```{python}
sql = f"""
SELECT p.people_first_name, p.people_last_name
    FROM people p
    JOIN peopleroles pr ON p.people_id = pr.peopleroles_people_id
    JOIN roles r ON pr.peopleroles_role_id = r.roles_id
    WHERE r.roles_name = 'Developer';
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills

```{python}
sql = f"""
SELECT p.people_first_name, p.people_last_name, p.people_email
    FROM people p
    LEFT JOIN peopleskills ps ON p.people_id = ps.peopleskills_people_id
    WHERE ps.peopleskills_id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills

```{python}
sql = f"""
SELECT s.skills_name, s.skills_tag
    FROM skills s
    LEFT JOIN peopleskills ps ON s.skills_id = ps.peopleskills_skills_id
    WHERE ps.peopleskills_id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role

```{python}
sql = f"""
SELECT p.people_first_name, p.people_last_name, s.skills_name
    FROM people p
    JOIN peopleroles pr ON p.people_id = pr.peopleroles_people_id
    JOIN roles r ON pr.peopleroles_role_id = r.roles_id
    LEFT JOIN peopleskills ps ON p.people_id = ps.peopleskills_people_id
    LEFT JOIN skills s ON ps.peopleskills_skills_id = s.skills_id
    WHERE r.roles_name = 'Boss';
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List ids and names of unused roles

```{python}
sql = f"""
SELECT r.roles_id, r.roles_name
    FROM roles r
    LEFT JOIN peopleroles pr ON r.roles_id = pr.peopleroles_role_id
    WHERE pr.peopleroles_role_id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

I enjoyed working on this database assignment as it provided a hands-on opportunity to apply theoretical knowledge to practical implementation. Creating the database involved designing tables, relationships, and constraints, which deepened my understanding of database management concepts that we have been learning in class. Overall, the experience was both educational and enjoyable.
